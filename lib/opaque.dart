// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT BY HAND AS CHANGES WILL BE OVERRIDDEN.
// TO EDIT THE THEME, SEE https://git.openprivacy.ca/openprivacy/opaque/
// FOR HOW THIS FILE IS GENERATED, SEE ../regenerate_opaque_theme.sh

import 'dart:ui';
import 'dart:core';

import 'package:flutter/material.dart';
import 'package:cwtch/settings.dart';

abstract class OpaqueThemeType {
  static final Color red = Color(0xFFFF0000);

  String identifier() {
    return "dummy";
  }

  Color backgroundMainColor() {
    return red;
  }

  Color backgroundPaneColor() {
    return red;
  }

  Color backgroundHilightElementColor() {
    return red;
  }

  Color dividerColor() {
    return red;
  }

  Color mainTextColor() {
    return red;
  }

  Color altTextColor() {
    return red;
  }

  Color hilightElementTextColor() {
    return red;
  }

  Color defaultButtonColor() {
    return red;
  }

  Color defaultButtonActiveColor() {
    return red;
  }

  Color defaultButtonTextColor() {
    return red;
  }

  Color defaultButtonDisabledColor() {
    return red;
  }

  Color defaultButtonDisabledTextColor() {
    return red;
  }

  Color altButtonColor() {
    return red;
  }

  Color altButtonTextColor() {
    return red;
  }

  Color altButtonDisabledColor() {
    return red;
  }

  Color altButtonDisabledTextColor() {
    return red;
  }

  Color textfieldBackgroundColor() {
    return red;
  }

  Color textfieldBorderColor() {
    return red;
  }

  Color textfieldTextColor() {
    return red;
  }

  Color textfieldErrorColor() {
    return red;
  }

  Color textfieldButtonColor() {
    return red;
  }

  Color textfieldButtonTextColor() {
    return red;
  }

  Color scrollbarDefaultColor() {
    return red;
  }

  Color scrollbarActiveColor() {
    return red;
  }

  Color portraitOnlineBorderColor() {
    return red;
  }

  Color portraitOnlineBackgroundColor() {
    return red;
  }

  Color portraitOnlineTextColor() {
    return red;
  }

  Color portraitConnectingBorderColor() {
    return red;
  }

  Color portraitConnectingBackgroundColor() {
    return red;
  }

  Color portraitConnectingTextColor() {
    return red;
  }

  Color portraitOfflineBorderColor() {
    return red;
  }

  Color portraitOfflineBackgroundColor() {
    return red;
  }

  Color portraitOfflineTextColor() {
    return red;
  }

  Color portraitBlockedBorderColor() {
    return red;
  }

  Color portraitBlockedBackgroundColor() {
    return red;
  }

  Color portraitBlockedTextColor() {
    return red;
  }

  Color portraitOnlineBadgeColor() {
    return red;
  }

  Color portraitOfflineBadgeColor() {
    return red;
  }

  Color portraitContactBadgeColor() {
    return red;
  }

  Color portraitContactBadgeTextColor() {
    return red;
  }

  Color portraitProfileBadgeColor() {
    return red;
  }

  Color portraitProfileBadgeTextColor() {
    return red;
  }

  Color portraitOverlayOfflineColor() {
    return red;
  }

  Color dropShadowColor() {
    return red;
  }

  Color dropShadowPaneColor() {
    return red;
  }

  Color toggleColor() {
    return red;
  }

  Color toggleOnColor() {
    return red;
  }

  Color toggleOffColor() {
    return red;
  }

  Color sliderButtonColor() {
    return red;
  }

  Color sliderBarLeftColor() {
    return red;
  }

  Color sliderBarRightColor() {
    return red;
  }

  Color boxCheckedColor() {
    return red;
  }

  Color toolbarIconColor() {
    return red;
  }

  Color toolbarMainColor() {
    return red;
  }

  Color toolbarAltColor() {
    return red;
  }

  Color statusbarDisconnectedInternetColor() {
    return red;
  }

  Color statusbarDisconnectedInternetFontColor() {
    return red;
  }

  Color statusbarDisconnectedTorFontColor() {
    return red;
  }

  Color statusbarDisconnectedTorColor() {
    return red;
  }

  Color statusbarConnectingColor() {
    return red;
  }

  Color statusbarConnectingFontColor() {
    return red;
  }

  Color statusbarOnlineColor() {
    return red;
  }

  Color statusbarOnlineFontColor() {
    return red;
  }

  Color chatOverlayWarningTextColor() {
    return red;
  }

  Color messageFromMeBackgroundColor() {
    return red;
  }

  Color messageFromMeTextColor() {
    return red;
  }

  Color messageFromOtherBackgroundColor() {
    return red;
  }

  Color messageFromOtherTextColor() {
    return red;
  }

  Color messageStatusNormalColor() {
    return red;
  }

  Color messageStatusBlockedColor() {
    return red;
  }

  Color messageStatusBlockedTextColor() {
    return red;
  }

  Color messageStatusAlertColor() {
    return red;
  }

  Color messageStatusAlertTextColor() {
    return red;
  }

  // ... more to come

  // Sizes

  double contactOnionTextSize() {
    return 18;
  }
}

class OpaqueDark extends OpaqueThemeType {
  static final Color darkGreyPurple = Color(0xFF281831);
  static final Color deepPurple = Color(0xFF422850);
  static final Color mauvePurple = Color(0xFF8E64A5);
  static final Color purple = Color(0xFFDFB9DE);
  static final Color whitePurple = Color(0xFFE3DFE4);
  static final Color softPurple = Color(0xFFFDF3FC);
  static final Color pink = Color(0xFFE85DA1);
  static final Color hotPink = Color(0xFFD01972);
  static final Color lightGrey = Color(0xFF9E9E9E);
  static final Color softGreen = Color(0xFFA0FFB0);
  static final Color softRed = Color(0xFFFFA0B0);

  String identifier() {
    return "dark";
  }

  Color backgroundMainColor() {
    return darkGreyPurple;
  }

  Color backgroundPaneColor() {
    return darkGreyPurple;
  }

  Color backgroundHilightElementColor() {
    return deepPurple;
  }

  Color dividerColor() {
    return deepPurple;
  }

  Color mainTextColor() {
    return whitePurple;
  }

  Color altTextColor() {
    return whitePurple;
  }

  Color hilightElementTextColor() {
    return purple;
  }

  Color defaultButtonColor() {
    return hotPink;
  }

  Color defaultButtonActiveColor() {
    return pink;
  }

  Color defaultButtonTextColor() {
    return whitePurple;
  }

  Color defaultButtonDisabledColor() {
    return deepPurple;
  }

  Color defaultButtonDisabledTextColor() {
    return darkGreyPurple;
  }

  Color altButtonColor() {
    return darkGreyPurple;
  }

  Color altButtonTextColor() {
    return purple;
  }

  Color altButtonDisabledColor() {
    return darkGreyPurple;
  }

  Color altButtonDisabledTextColor() {
    return purple;
  }

  Color textfieldBackgroundColor() {
    return deepPurple;
  }

  Color textfieldBorderColor() {
    return deepPurple;
  }

  Color textfieldTextColor() {
    return purple;
  }

  Color textfieldErrorColor() {
    return hotPink;
  }

  Color textfieldButtonColor() {
    return purple;
  }

  Color textfieldButtonTextColor() {
    return darkGreyPurple;
  }

  Color scrollbarDefaultColor() {
    return purple;
  }

  Color scrollbarActiveColor() {
    return hotPink;
  }

  Color portraitOnlineBorderColor() {
    return whitePurple;
  }

  Color portraitOnlineBackgroundColor() {
    return whitePurple;
  }

  Color portraitOnlineTextColor() {
    return whitePurple;
  }

  Color portraitConnectingBorderColor() {
    return purple;
  } //mauvePurple

  Color portraitConnectingBackgroundColor() {
    return purple;
  } //darkGreyPurple

  Color portraitConnectingTextColor() {
    return purple;
  }

  Color portraitOfflineBorderColor() {
    return purple;
  }

  Color portraitOfflineBackgroundColor() {
    return purple;
  }

  Color portraitOfflineTextColor() {
    return purple;
  }

  Color portraitBlockedBorderColor() {
    return lightGrey;
  }

  Color portraitBlockedBackgroundColor() {
    return lightGrey;
  }

  Color portraitBlockedTextColor() {
    return lightGrey;
  }

  Color portraitOnlineBadgeColor() {
    return softGreen;
  }

  Color portraitOfflineBadgeColor() {
    return softRed;
  }

  Color portraitContactBadgeColor() {
    return hotPink;
  }

  Color portraitContactBadgeTextColor() {
    return whitePurple;
  }

  Color portraitProfileBadgeColor() {
    return mauvePurple;
  }

  Color portraitProfileBadgeTextColor() {
    return darkGreyPurple;
  }

  Color portraitOverlayOfflineColor() {
    return mauvePurple;
  }

  Color dropShadowColor() {
    return mauvePurple;
  }

  Color dropShadowPaneColor() {
    return darkGreyPurple;
  }

  Color toggleColor() {
    return darkGreyPurple;
  }

  Color toggleOnColor() {
    return whitePurple;
  }

  Color toggleOffColor() {
    return deepPurple;
  }

  Color sliderButtonColor() {
    return whitePurple;
  }

  Color sliderBarLeftColor() {
    return mauvePurple;
  }

  Color sliderBarRightColor() {
    return mauvePurple;
  }

  Color boxCheckedColor() {
    return hotPink;
  }

  Color toolbarIconColor() {
    return whitePurple;
  }

  Color toolbarMainColor() {
    return darkGreyPurple;
  }

  Color toolbarAltColor() {
    return deepPurple;
  }

  Color statusbarDisconnectedInternetColor() {
    return whitePurple;
  }

  Color statusbarDisconnectedInternetFontColor() {
    return deepPurple;
  }

  Color statusbarDisconnectedTorColor() {
    return darkGreyPurple;
  }

  Color statusbarDisconnectedTorFontColor() {
    return whitePurple;
  }

  Color statusbarConnectingColor() {
    return deepPurple;
  }

  Color statusbarConnectingFontColor() {
    return whitePurple;
  }

  Color statusbarOnlineColor() {
    return mauvePurple;
  }

  Color statusbarOnlineFontColor() {
    return whitePurple;
  }

  Color chatOverlayWarningTextColor() {
    return purple;
  }

  Color messageFromMeBackgroundColor() {
    return mauvePurple;
  }

  Color messageFromMeTextColor() {
    return whitePurple;
  }

  Color messageFromOtherBackgroundColor() {
    return deepPurple;
  }

  Color messageFromOtherTextColor() {
    return whitePurple;
  }

  Color messageStatusNormalColor() {
    return deepPurple;
  }

  Color messageStatusBlockedColor() {
    return lightGrey;
  }

  Color messageStatusBlockedTextColor() {
    return whitePurple;
  }

  Color messageStatusAlertColor() {
    return mauvePurple;
  }

  Color messageStatusAlertTextColor() {
    return whitePurple;
  }
}

class OpaqueLight extends OpaqueThemeType {
  static final Color whitePurple = Color(0xFFFFFDFF);
  static final Color softPurple = Color(0xFFFDF3FC);
  static final Color purple = Color(0xFFDFB9DE);
  static final Color brightPurple = Color(0xFF760388);
  static final Color darkPurple = Color(0xFF350052);
  static final Color greyPurple = Color(0xFF775F84);
  static final Color pink = Color(0xFFE85DA1);
  static final Color hotPink = Color(0xFFD01972);
  static final Color lightGrey = Color(0xFFB3B6B3);
  static final Color softGreen = Color(0xFFA0FFB0);
  static final Color softRed = Color(0xFFFFA0B0);

  String identifier() {
    return "light";
  }

  Color backgroundMainColor() {
    return whitePurple;
  }

  Color backgroundPaneColor() {
    return softPurple;
  }

  Color backgroundHilightElementColor() {
    return softPurple;
  }

  Color dividerColor() {
    return purple;
  }

  Color mainTextColor() {
    return darkPurple;
  }

  Color altTextColor() {
    return purple;
  }

  Color hilightElementTextColor() {
    return darkPurple;
  }

  Color defaultButtonColor() {
    return hotPink;
  }

  Color defaultButtonActiveColor() {
    return pink;
  }

  Color defaultButtonTextColor() {
    return whitePurple;
  }

  Color defaultButtonDisabledColor() {
    return purple;
  }

  Color defaultButtonDisabledTextColor() {
    return whitePurple;
  }

  Color altButtonColor() {
    return whitePurple;
  }

  Color altButtonTextColor() {
    return purple;
  }

  Color altButtonDisabledColor() {
    return softPurple;
  }

  Color altButtonDisabledTextColor() {
    return purple;
  }

  Color textfieldBackgroundColor() {
    return purple;
  }

  Color textfieldBorderColor() {
    return purple;
  }

  Color textfieldTextColor() {
    return purple;
  }

  Color textfieldErrorColor() {
    return hotPink;
  }

  Color textfieldButtonColor() {
    return hotPink;
  }

  Color textfieldButtonTextColor() {
    return whitePurple;
  }

  Color scrollbarDefaultColor() {
    return darkPurple;
  }

  Color scrollbarActiveColor() {
    return hotPink;
  }

  Color portraitOnlineBorderColor() {
    return greyPurple;
  }

  Color portraitOnlineBackgroundColor() {
    return greyPurple;
  }

  Color portraitOnlineTextColor() {
    return darkPurple;
  }

  Color portraitConnectingBorderColor() {
    return greyPurple;
  }

  Color portraitConnectingBackgroundColor() {
    return greyPurple;
  }

  Color portraitConnectingTextColor() {
    return greyPurple;
  }

  Color portraitOfflineBorderColor() {
    return greyPurple;
  } //purple

  Color portraitOfflineBackgroundColor() {
    return greyPurple;
  } //purple

  Color portraitOfflineTextColor() {
    return greyPurple;
  } //purple

  Color portraitBlockedBorderColor() {
    return lightGrey;
  }

  Color portraitBlockedBackgroundColor() {
    return lightGrey;
  }

  Color portraitBlockedTextColor() {
    return lightGrey;
  }

  Color portraitOnlineBadgeColor() {
    return softGreen;
  }

  Color portraitOfflineBadgeColor() {
    return softRed;
  }

  Color portraitContactBadgeColor() {
    return hotPink;
  }

  Color portraitContactBadgeTextColor() {
    return whitePurple;
  }

  Color portraitProfileBadgeColor() {
    return brightPurple;
  }

  Color portraitProfileBadgeTextColor() {
    return whitePurple;
  }

  Color portraitOverlayOfflineColor() {
    return whitePurple;
  }

  Color dropShadowColor() {
    return purple;
  }

  Color dropShadowPaneColor() {
    return purple;
  }

  Color toggleColor() {
    return whitePurple;
  }

  Color toggleOnColor() {
    return hotPink;
  }

  Color toggleOffColor() {
    return purple;
  }

  Color sliderButtonColor() {
    return pink;
  }

  Color sliderBarLeftColor() {
    return purple;
  }

  Color sliderBarRightColor() {
    return purple;
  }

  Color boxCheckedColor() {
    return darkPurple;
  }

  Color toolbarIconColor() {
    return darkPurple;
  }

  Color toolbarMainColor() {
    return whitePurple;
  }

  Color toolbarAltColor() {
    return softPurple;
  }

  Color statusbarDisconnectedInternetColor() {
    return softPurple;
  }

  Color statusbarDisconnectedInternetFontColor() {
    return darkPurple;
  }

  Color statusbarDisconnectedTorColor() {
    return purple;
  }

  Color statusbarDisconnectedTorFontColor() {
    return darkPurple;
  }

  Color statusbarConnectingColor() {
    return greyPurple;
  }

  Color statusbarConnectingFontColor() {
    return whitePurple;
  }

  Color statusbarOnlineColor() {
    return darkPurple;
  }

  Color statusbarOnlineFontColor() {
    return whitePurple;
  }

  Color chatOverlayWarningTextColor() {
    return purple;
  }

  Color messageFromMeBackgroundColor() {
    return darkPurple;
  }

  Color messageFromMeTextColor() {
    return whitePurple;
  }

  Color messageFromOtherBackgroundColor() {
    return purple;
  }

  Color messageFromOtherTextColor() {
    return darkPurple;
  }

  Color messageStatusNormalColor() {
    return purple;
  }

  Color messageStatusBlockedColor() {
    return lightGrey;
  }

  Color messageStatusBlockedTextColor() {
    return whitePurple;
  }

  Color messageStatusAlertColor() {
    return hotPink;
  }

  Color messageStatusAlertTextColor() {
    return whitePurple;
  }
}

ThemeData mkThemeData(Settings opaque) {
  return ThemeData(
    visualDensity: VisualDensity.adaptivePlatformDensity,
    primarySwatch: Colors.red,
    primaryIconTheme: IconThemeData(
      color: opaque.current().mainTextColor(),
    ),
    primaryColor: opaque.current().backgroundMainColor(),
    canvasColor: opaque.current().backgroundPaneColor(),
    backgroundColor: opaque.current().backgroundMainColor(),
    highlightColor: opaque.current().hilightElementTextColor(),
    iconTheme: IconThemeData(
      color: opaque.current().mainTextColor(),
    ),
    cardColor: opaque.current().backgroundMainColor(),
    appBarTheme: AppBarTheme(
        backgroundColor: opaque.current().backgroundPaneColor(),
        titleTextStyle: TextStyle(
          color: opaque.current().mainTextColor(),
        ),
        actionsIconTheme: IconThemeData(
          color: opaque.current().mainTextColor(),
        )),
    bottomNavigationBarTheme: BottomNavigationBarThemeData(type: BottomNavigationBarType.fixed, backgroundColor: opaque.current().backgroundHilightElementColor()),
    textButtonTheme: TextButtonThemeData(
      style: ButtonStyle(
          backgroundColor: MaterialStateProperty.all(opaque.current().defaultButtonColor()),
          foregroundColor: MaterialStateProperty.all(opaque.current().defaultButtonTextColor()),
          overlayColor: MaterialStateProperty.all(opaque.current().defaultButtonActiveColor()),
          padding: MaterialStateProperty.all(EdgeInsets.all(20))),
    ),
    elevatedButtonTheme: ElevatedButtonThemeData(
      style: ButtonStyle(
        backgroundColor: MaterialStateProperty.all(opaque.current().defaultButtonColor()),
        foregroundColor: MaterialStateProperty.all(opaque.current().defaultButtonTextColor()),
        overlayColor: MaterialStateProperty.all(opaque.current().defaultButtonActiveColor()),
        padding: MaterialStateProperty.all(EdgeInsets.all(20)),
        shape: MaterialStateProperty.all(RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(18.0),
        )),
      ),
    ),
    scrollbarTheme: ScrollbarThemeData(
        isAlwaysShown: false, thumbColor: MaterialStateProperty.all(opaque.current().scrollbarActiveColor()), trackColor: MaterialStateProperty.all(opaque.current().scrollbarDefaultColor())),
    tabBarTheme: TabBarTheme(indicator: UnderlineTabIndicator(borderSide: BorderSide(color: opaque.current().defaultButtonActiveColor()))),
    dialogTheme: DialogTheme(
        backgroundColor: opaque.current().backgroundPaneColor(),
        titleTextStyle: TextStyle(color: opaque.current().mainTextColor()),
        contentTextStyle: TextStyle(color: opaque.current().mainTextColor())),
    textTheme: TextTheme(
        headline1: TextStyle(color: opaque.current().mainTextColor()),
        headline2: TextStyle(color: opaque.current().mainTextColor()),
        headline3: TextStyle(color: opaque.current().mainTextColor()),
        headline4: TextStyle(color: opaque.current().mainTextColor()),
        headline5: TextStyle(color: opaque.current().mainTextColor()),
        headline6: TextStyle(color: opaque.current().mainTextColor()),
        bodyText1: TextStyle(color: opaque.current().mainTextColor()),
        bodyText2: TextStyle(color: opaque.current().mainTextColor()),
        subtitle1: TextStyle(color: opaque.current().mainTextColor()),
        subtitle2: TextStyle(color: opaque.current().mainTextColor()),
        caption: TextStyle(color: opaque.current().mainTextColor()),
        button: TextStyle(color: opaque.current().mainTextColor()),
        overline: TextStyle(color: opaque.current().mainTextColor())),
    switchTheme: SwitchThemeData(
      overlayColor: MaterialStateProperty.all(opaque.current().defaultButtonActiveColor()),
      thumbColor: MaterialStateProperty.all(opaque.current().mainTextColor()),
      trackColor: MaterialStateProperty.all(opaque.current().dropShadowColor()),
    ),
    floatingActionButtonTheme: FloatingActionButtonThemeData(backgroundColor: opaque.current().defaultButtonColor(), hoverColor: opaque.current().defaultButtonActiveColor()),
    textSelectionTheme: TextSelectionThemeData(
        cursorColor: opaque.current().defaultButtonActiveColor(), selectionColor: opaque.current().defaultButtonActiveColor(), selectionHandleColor: opaque.current().defaultButtonActiveColor()),
  );
}

/*

OpaqueThemeType _current = CwtchDark();

void setDark() {
  _current = CwtchDark();
}

void setLight() {
  _current = CwtchLight();
}

OpaqueThemeType current() {
  if (_current == null) {
    setDark();
  }
  return _current;
}

class Opaque extends OpaqueThemeType {
  Color backgroundMainColor() {
    return current().backgroundMainColor();
  }

  Color backgroundPaneColor() {
    return current().backgroundPaneColor();
  }

  Color backgroundHilightElementColor() {
    return current().backgroundHilightElementColor();
  }

  Color dividerColor() {
    return current().dividerColor();
  }

  Color mainTextColor() {
    return current().mainTextColor();
  }

  Color altTextColor() {
    return current().altTextColor();
  }

  Color hilightElementTextColor() {
    return current().hilightElementTextColor();
  }

  Color defaultButtonColor() {
    return current().defaultButtonColor();
  }

  Color defaultButtonActiveColor() {
    return current().defaultButtonActiveColor();
  }

  Color defaultButtonTextColor() {
    return current().defaultButtonTextColor();
  }

  Color defaultButtonDisabledColor() {
    return current().defaultButtonDisabledColor();
  }

  Color defaultButtonDisabledTextColor() {
    return current().defaultButtonDisabledTextColor();
  }

  Color altButtonColor() {
    return current().altButtonColor();
  }

  Color altButtonTextColor() {
    return current().altButtonTextColor();
  }

  Color altButtonDisabledColor() {
    return current().altButtonDisabledColor();
  }

  Color altButtonDisabledTextColor() {
    return current().altButtonDisabledTextColor();
  }

  Color textfieldBackgroundColor() {
    return current().textfieldBackgroundColor();
  }

  Color textfieldBorderColor() {
    return current().textfieldBorderColor();
  }

  Color textfieldTextColor() {
    return current().textfieldTextColor();
  }

  Color textfieldErrorColor() {
    return current().textfieldErrorColor();
  }

  Color textfieldButtonColor() {
    return current().textfieldButtonColor();
  }

  Color textfieldButtonTextColor() {
    return current().textfieldButtonTextColor();
  }

  Color dropShadowColor() {
    return current().dropShadowColor();
  }

  Color dropShadowPaneColor() {
    return current().dropShadowPaneColor();
  }

  Color portraitOnlineBorderColor() {
    return current().portraitOnlineBorderColor();
  }

  Color portraitOnlineBackgroundColor() {
    return current().portraitOnlineBackgroundColor();
  }

  Color portraitOnlineTextColor() {
    return current().portraitOnlineTextColor();
  }

  Color portraitConnectingBorderColor() {
    return current().portraitConnectingBorderColor();
  }

  Color portraitConnectingBackgroundColor() {
    return current().portraitConnectingBackgroundColor();
  }

  Color portraitConnectingTextColor() {
    return current().portraitConnectingTextColor();
  }

  Color portraitOfflineBorderColor() {
    return current().portraitOfflineBorderColor();
  }

  Color portraitOfflineBackgroundColor() {
    return current().portraitOfflineBackgroundColor();
  }

  Color portraitOfflineTextColor() {
    return current().portraitOfflineTextColor();
  }

  Color portraitBlockedBorderColor() {
    return current().portraitBlockedBorderColor();
  }

  Color portraitBlockedBackgroundColor() {
    return current().portraitBlockedBackgroundColor();
  }

  Color portraitBlockedTextColor() {
    return current().portraitBlockedTextColor();
  }

  Color portraitOnlineBadgeColor() {
    return current().portraitOnlineBadgeColor();
  }

  Color portraitOfflineBadgeColor() {
    return current().portraitOfflineBadgeColor();
  }

  Color portraitContactBadgeColor() {
    return current().portraitContactBadgeColor();
  }

  Color portraitContactBadgeTextColor() {
    return current().portraitContactBadgeTextColor();
  }

  Color portraitProfileBadgeColor() {
    return current().portraitProfileBadgeColor();
  }

  Color portraitProfileBadgeTextColor() {
    return current().portraitProfileBadgeTextColor();
  }

  Color portraitOverlayOfflineColor() {
    return current().portraitOverlayOfflineColor();
  }

  Color toggleColor() {
    return current().toggleColor();
  }

  Color toggleOffColor() {
    return current().toggleOffColor();
  }

  Color toggleOnColor() {
    return current().toggleOnColor();
  }

  Color sliderButtonColor() {
    return current().sliderButtonColor();
  }

  Color sliderBarLeftColor() {
    return current().sliderBarLeftColor();
  }

  Color sliderBarRightColor() {
    return current().sliderBarRightColor();
  }

  Color boxCheckedColor() {
    return current().boxCheckedColor();
  }

  Color toolbarIconColor() {
    return current().toolbarIconColor();
  }

  Color toolbarMainColor() {
    return current().toolbarMainColor();
  }

  Color toolbarAltColor() {
    return current().toolbarAltColor();
  }

  Color statusbarDisconnectedInternetColor() {
    return current().statusbarDisconnectedInternetColor();
  }

  Color statusbarDisconnectedInternetFontColor() {
    return current().statusbarDisconnectedInternetFontColor();
  }

  Color statusbarDisconnectedTorFontColor() {
    return current().statusbarDisconnectedTorFontColor();
  }

  Color statusbarDisconnectedTorColor() {
    return current().statusbarDisconnectedTorColor();
  }

  Color statusbarConnectingColor() {
    return current().statusbarConnectingColor();
  }

  Color statusbarConnectingFontColor() {
    return current().statusbarConnectingFontColor();
  }

  Color statusbarOnlineColor() {
    return current().statusbarOnlineColor();
  }

  Color statusbarOnlineFontColor() {
    return current().statusbarOnlineFontColor();
  }

  Color chatOverlayWarningTextColor() {
    return current().chatOverlayWarningTextColor();
  }

  Color messageFromMeBackgroundColor() {
    return current().messageFromMeBackgroundColor();
  }

  Color messageFromMeTextColor() {
    return current().messageFromMeTextColor();
  }

  Color messageFromOtherBackgroundColor() {
    return current().messageFromOtherBackgroundColor();
  }

  Color messageFromOtherTextColor() {
    return current().messageFromOtherTextColor();
  }

  Color messageStatusNormalColor() {
    return current().messageStatusNormalColor();
  }

  Color messageStatusBlockedColor() {
    return current().messageStatusBlockedColor();
  }

  Color messageStatusBlockedTextColor() {
    return current().messageStatusBlockedTextColor();
  }

  Color messageStatusAlertColor() {
    return current().messageStatusAlertColor();
  }

  Color messageStatusAlertTextColor() {
    return current().messageStatusAlertTextColor();
  }

  Color scrollbarDefaultColor() {
    return current().scrollbarDefaultColor();
  }

  Color scrollbarActiveColor() {
    return current().scrollbarActiveColor();
  }

  var sidePaneMinSizeBase = [200, 400, 600];
  int sidePaneMinSize() {
    return sidePaneMinSizeBase[p[scale]] + 200 /*for debugging*/;
  }

  var chatPaneMinSizeBase = [300, 400, 500];
  int chatPaneMinSize() {
    return chatPaneMinSizeBase[p[scale]];
  }

  int doublePaneMinSize() {
    return sidePaneMinSize() + chatPaneMinSize();
  }

  static late OpaqueThemeType _current;
  //static final OpaqueThemeType dark = CwtchDark();
  //static final OpaqueThemeType light = CwtchLight();


  int scale = 2;
  static final String gcdOS = "linux";

  var p = [0, 1, 1, 1, 2];
  var t = [0, 0, 1, 2, 2];

  var paddingMinimalBase = [1, 4, 6];
  int paddingMinimal() {
    return paddingMinimalBase[p[scale]];
  }

  var paddingSmallBase = [3, 10, 15];
  int paddingSmall() {
    return paddingSmallBase[p[scale]];
  }

  var paddingStandardBase = [8, 20, 30];
  int paddingStandard() {
    return paddingStandardBase[p[scale]];
  }

  var paddingLargeBase = [10, 30, 40];
  int paddingLarge() {
    return paddingLargeBase[p[scale]];
  }

  var paddingClickTargetBase = gcdOS == "android" ? [10, 40, 100] : [3, 10, 15];
  int paddingClickTarget() {
    return paddingClickTargetBase[p[scale]];
  }

  var textSmallPtBase = [8, 12, 16];
  int textSmallPt() {
    return textSmallPtBase[t[scale]];
  }

  var textMediumPtBase = [10, 16, 24];
  int textMediumPt() {
    return textMediumPtBase[t[scale]];
  }

  var textLargePtBase = [16, 24, 32];
  int textLargePt() {
    return textLargePtBase[t[scale]];
  }

  var textSubHeaderPtBase = [12, 18, 26];
  int textSubHeaderPt() {
    return textHeaderPtBase[t[scale]];
  }

  var textHeaderPtBase = [16, 24, 32];
  int textHeaderPt() {
    return textHeaderPtBase[t[scale]];
  }

  var uiIconSizeSBase = [8, 16, 24];
  int uiIconSizeS() {
    return uiIconSizeSBase[p[scale]];
  }

  var uiIconSizeMBase = [24, 32, 48];
  int uiIconSizeM() {
    return uiIconSizeMBase[p[scale]];
  }

  var uiIconSizeLBase = [32, 48, 60];
  int uiIconSizeL() {
    return uiIconSizeLBase[p[scale]];
  }

  var uiEmojiSizeBase = [24, 32, 48];
  int uiEmojiSize() {
    return uiEmojiSizeBase[p[scale]];
  }

  var contactPortraitSizeBase = [60, 72, 84];
  int contactPortraitSize() {
    return contactPortraitSizeBase[p[scale]];
  }

  int badgeTextSize() {
    return 12;
  }

  int statusTextSize() {
    return 12;
  }

  int chatSize() {
    return textMediumPt();
  }

  int tabSize() {
    return textMediumPt();
  }
}

*/
